---
layout: post
title:  "Kubernetes中数字证书的使用"
date:   2019-09-18 16:43:00 +08
categories: kuberetes
---
探究下k8s是如何实现对cpu的资源限定.先了解cgroup.

# Kubernetes中数字证书的使用
开始之前先补充一些背景知识.

## 什么是 ssl/tsl
加密通道,介于传输层和应用层之间.

- 单向认证,一般是客户端认证服务端
- 双向认证


## 公钥基础设施(PKI)
PKI借助数字证书和公钥加密技术提供可信任的网络身份.通常,证书就是一个包含如下身份信息的文件:
1. 证书所有组织的信息
2. 公钥
3. 证书颁发组织的信息
4. 证书颁发组织授予的权限，如证书有效期、适用的主机名、用途等
5. 使用证书颁发组织私钥创建的数字签名



### 基础概念

- CA
	>Certification Authority,权威机构

- CA证书
	>权威机构给我们颁发的证书(公钥).

- PEM
	>Privacy Enhanced Mail,内容为Base64编码的ASCII码文件,有类似"-----BEGIN CERTIFICATE-----" 和 "-----END CERTIFICATE-----"的头尾标记.

- DER
	>PEM不同之处在于其使用二进制而不是Base64编码的ASCII.

- CSR
	>Certificate Signing Request,它是向CA机构申请数字证书时使用的请求文件.CSR并不是证书.

- 数字签名
	>非对称加密+摘要算法,其目的不是为了加密,而是用来防止他人篡改数据.

- 数字证书
	>数字证书就是经过CA认证过的公钥,除了公钥,还有其他的信息.比如Email,国家,城市,域名等.

## CFSSL 
CFSSL是CloudFlare开源的一款PKI/TLS工具。 CFSSL 包含一个命令行工具 和一个用于 签名，验证并且捆绑TLS证书的 HTTP API 服务。 使用Go语言编写。

### 安装
```shell
wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64
wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64
wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64
chmod +x cfssl_linux-amd64 cfssljson_linux-amd64 cfssl-certinfo_linux-amd64
mv cfssl_linux-amd64 /usr/local/bin/cfssl
mv cfssljson_linux-amd64 /usr/local/bin/cfssljson
mv cfssl-certinfo_linux-amd64 /usr/bin/cfssl-certinfo
```

### 创建认证中心(CA),也叫根证书
CFSSL可以创建一个获取和操作证书的内部认证中心.运行认证中心需要一个CA证书(公钥)和相应的CA私钥.任何知道私钥的人都可以充当CA颁发证书.因此,私钥的保护至关重要.

- 配置证书生成策略
```shell
# 生成配置证书生成策略
$ cfssl print-defaults config > ca-config.json
# 修改后的
$ vi ca-config.json
{
	"signing": {                   
		"default": {
			"expiry": "8760h"
		},
		"profiles": {
			"kubernetes": {
				"expiry": "8760h",
				"usages": [
					"signing",
					"key encipherment",
					"server auth",
					"client auth"
				]
			}
		}
	}
}
# 这个策略,有一个default默认的配置,和一个profiles,profiles可以设置多个profile,这里的profile是kubernetes.
# default默认策略,指定了证书的默认有效期是一年(8760h)
# kubernetes,表示该配置(profile)的用途是为kubernetes生成证书及相关的校验工作
# expiry,profile的过期时间,覆盖default的配置
# usages,说明证书的用途
# signing,表示该证书可用于签名其它证书
# key encipherment,密钥加密
# server auth,表示可以用该 CA 对 server 提供的证书进行验证
# client auth,表示可以用该 CA 对 client 提供的证书进行验证
```	

- 生成CSR明文文件
```shell
$ cfssl print-defaults csr > ca-csr.json
# 修改后的
$ vi ca-csr.json
{
	"CN": "kubernetes",
	"key": {
		"algo": "rsa",
		"size": 2048
	},
	"names": [
		{
			"C": "CN",
			"L": "BJ",
			"ST": "SELF"
		}
	]
}
# CN,Common Name浏览器使用该字段验证网站是否合法,一般写的是域名
# key 加密算法,使用rsa
# names,CA证书的属性信息,eg:cn表示中国,bj表示北京,SELF表示个人
```

- 生成CA证书和私钥
```shell
$ cfssl gencert -initca ca-csr.json | cfssljson -bare ca
2019/09/09 13:45:11 [INFO] generating a new CA key and certificate from CSR
2019/09/09 13:45:11 [INFO] generate received request
2019/09/09 13:45:11 [INFO] received CSR
2019/09/09 13:45:11 [INFO] generating key: rsa-2048
2019/09/09 13:45:11 [INFO] encoded CSR
2019/09/09 13:45:11 [INFO] signed certificate with serial number 566484648409636550021554848530878287544683394567
$ ls -l |grep -v json
total 20
-rw-r--r-- 1 root root  948 Sep  9 13:45 ca.csr
-rw------- 1 root root 1675 Sep  9 13:45 ca-key.pem
-rw-r--r-- 1 root root 1253 Sep  9 13:45 ca.pem	
# ca.pem 证书 
# ca-key.pem 私钥 
# ca.csr 加密的签名请求文件
```
	
### 生成k8s服务端证书和私钥以及生成kubeconfig
通过自己创建的认证中心,签名新的证书和私钥.

- Run kubectl as follows for each config:

```
KUBECONFIG=<filename> kubectl config set-cluster default-cluster --server=https://<host ip>:6443 --certificate-authority <path-to-kubernetes-ca> --embed-certs
KUBECONFIG=<filename> kubectl config set-credentials <credential-name> --client-key <path-to-key>.pem --client-certificate <path-to-cert>.pem --embed-certs
KUBECONFIG=<filename> kubectl config set-context default-system --cluster default-cluster --user <credential-name>
KUBECONFIG=<filename> kubectl config use-context default-system
```

- 生成CSR明文文件
```shell
$ cfssl print-defaults csr > k8s-csr.json
# 修改后的
$ vi k8s-csr.json
{
	"CN": "kubernetes",
	 "hosts": [
		"127.0.0.1",
		"192.168.202.126", 
		"192.168.202.127", 
		"192.168.202.128", 
		"172.16.0.1",  
		"kubernetes",
		"kubernetes.default",
		"kubernetes.default.svc",
		"kubernetes.default.svc.cluster",
		"kubernetes.default.svc.cluster.local"  
	 ],		
	"key": {
		"algo": "rsa",
		"size": 2048
	},
	"names": [
		{
			"C": "CN",
			"L": "BJ",
			"ST": "SELF",
			"O": "k8s",
			"OU": "System"
		}
	]
}
# hosts:表示哪些主机名(域名)或者IP可以使用此csr申请的证书
# O,Organization Name,组织名称,公司名称(在k8s中常用于指定Group,进行RBAC绑定)
```
	
- 生成证书和私钥
```shell
# -ca,指定ca认证中心证书
# -ca-key,指定ca认证中心私钥
# -config,指定证书生成策略文件
# -profile,指定具体策略,eg:前面定义的kubernetes
$ cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes k8s-csr.json | cfssljson -bare k8s
2019/09/09 14:28:49 [INFO] generate received request
2019/09/09 14:28:49 [INFO] received CSR
2019/09/09 14:28:49 [INFO] generating key: rsa-2048
2019/09/09 14:28:49 [INFO] encoded CSR
2019/09/09 14:28:49 [INFO] signed certificate with serial number 495056245603067198504425030582895074448090702852
2019/09/09 14:28:49 [WARNING] This certificate lacks a "hosts" field. This makes it unsuitable for
websites. For more information see the Baseline Requirements for the Issuance and Management
of Publicly-Trusted Certificates, v.1.1.6, from the CA/Browser Forum (https://cabforum.org);
specifically, section 10.2.3 ("Information Requirements").
$ ls -l |grep k8s |grep -v json
-rw-r--r-- 1 root root 1249 Sep  9 14:28 k8s.csr
-rw------- 1 root root 1679 Sep  9 14:28 k8s-key.pem
-rw-r--r-- 1 root root 1566 Sep  9 14:28 k8s.pem
```

- 生成kube-controller-manager使用证书
```shell	
$ cat > /etc/ssl/kube-controller-manager-csr.json << EOF
{
"CN": "system:kube-controller-manager",
"key": {
    "algo": "rsa",
    "size": 2048
},
"names": [
    {
        "C": "CN",
        "L": "BJ",
        "ST": "SELF",
        "O": "system:kube-controller-manager"
    }
]
}

EOF

$ cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager
```

- 生成kube-controller-manager.kubeconfig
```shell
kubectl config --kubeconfig=kube-controller-manager.kubeconfig set-cluster kubernetes --certificate-authority=/etc/ssl/k8s/ca.pem --embed-certs=true --server=https://192.168.202.126:6443 
kubectl config --kubeconfig=kube-controller-manager.kubeconfig set-credentials kube-controller-manager --client-certificate=/etc/ssl/k8s/kube-controller-manager.pem --client-key=/etc/ssl/k8s/kube-controller-manager-key.pem --embed-certs=true 
kubectl config --kubeconfig=kube-controller-manager.kubeconfig set-context kube-controller-manager  --cluster=kubernetes --user=kube-controller-manager  
kubectl config --kubeconfig=kube-controller-manager.kubeconfig use-context kube-controller-manager 

```
	

- 生成kube-scheduler请求证书文件
```shell	
$ cat > /etc/ssl/k8s/kube-scheduler-csr.json << EOF
{
"CN": "system:kube-scheduler",
"key": {
    "algo": "rsa",
    "size": 2048
},
"names": [
    {
        "C": "CN",
        "L": "BJ",
        "ST": "SELF",
        "O": "system:kube-scheduler"
    }
]
}

EOF

$ cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-scheduler-csr.json | cfssljson -bare kube-scheduler
```

- 生成kube-scheduler.kubeconfig
```shell
kubectl config --kubeconfig=kube-scheduler.kubeconfig set-cluster kubernetes --certificate-authority=/etc/ssl/k8s/ca.pem --embed-certs=true --server=https://192.168.202.126:6443 
kubectl config --kubeconfig=kube-scheduler.kubeconfig set-credentials kube-scheduler --client-certificate=/etc/ssl/k8s/kube-scheduler.pem --client-key=/etc/ssl/k8s/kube-scheduler-key.pem --embed-certs=true 
kubectl config --kubeconfig=kube-scheduler.kubeconfig set-context kube-scheduler --cluster=kubernetes --user=kube-scheduler 
kubectl config --kubeconfig=kube-scheduler.kubeconfig use-context kube-scheduler

```

- 生成kube-node请求证书文件(每个都需要定制)
```shell	
$ cat > /etc/ssl/k8s/kube-node202127-csr.json << EOF
{
"CN": "system:node:192.168.202.127",
"key": {
    "algo": "rsa",
    "size": 2048
},
"names": [
    {
        "C": "CN",
        "L": "BJ",
        "ST": "SELF",
        "O": "system:nodes"
    }
]
}

EOF

$ cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-node202127-csr.json | cfssljson -bare kube-node202127
```

- 生成kube-node.kubeconfig
```shell
kubectl config --kubeconfig=kubelet202127.kubeconfig set-cluster kubernetes --certificate-authority=/etc/ssl/k8s/ca.pem --embed-certs=true --server=https://192.168.202.126:6443 
kubectl config --kubeconfig=kubelet202127.kubeconfig set-credentials kubelet --client-certificate=/etc/ssl/k8s/kube-node202127.pem --client-key=/etc/ssl/k8s/kube-node202127-key.pem --embed-certs=true 
kubectl config --kubeconfig=kubelet202127.kubeconfig set-context kubelet --cluster=kubernetes --user=kubelet 
kubectl config --kubeconfig=kubelet202127.kubeconfig use-context kubelet

```
> 每个主机生成不一样的证书,主要区别在于 CN 和 O,对应k8s中用户和组.


- 生成 kube-proxy 请求证书文件
```shell	
$ cat > /etc/ssl/k8s/kube-proxy-csr.json << EOF
{
"CN": "system:kube-proxy",
"key": {
    "algo": "rsa",
    "size": 2048
},
"names": [
    {
        "C": "CN",
        "L": "BJ",
        "ST": "SELF",
        "O": "system:kube-proxy"
    }
]
}
EOF

$ cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy
```

- 生成kube-proxy.kubeconfig
```shell
kubectl config --kubeconfig=kube-proxy.kubeconfig set-cluster kubernetes --certificate-authority=/etc/ssl/k8s/ca.pem --embed-certs=true --server=https://192.168.202.126:6443 
kubectl config --kubeconfig=kube-proxy.kubeconfig set-credentials kube-proxy --client-certificate=/etc/ssl/k8s/kube-proxy.pem --client-key=/etc/ssl/k8s/kube-proxy-key.pem --embed-certs=true 
kubectl config --kubeconfig=kube-proxy.kubeconfig set-context kube-proxy --cluster=kubernetes --user=kube-proxy 
kubectl config --kubeconfig=kube-proxy.kubeconfig use-context kube-proxy

```

- 生成 kube-admin-csr.json
```shell	
$ cat > /etc/ssl/k8s/kube-admin-csr.json << EOF
{
"CN": "kube-admin",
"key": {
    "algo": "rsa",
    "size": 2048
},
"names": [
    {
        "C": "CN",
        "L": "BJ",
        "ST": "SELF",
        "O": "system:masters"
    }
]
}
EOF

$ cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-admin-csr.json | cfssljson -bare kube-admin
```

- 生成kube-admin.kubeconfig
```shell
kubectl config --kubeconfig=kube-admin.kubeconfig set-cluster kubernetes --certificate-authority=/etc/ssl/k8s/ca.pem --embed-certs=true --server=https://192.168.202.126:6443 
kubectl config --kubeconfig=kube-admin.kubeconfig set-credentials kube-admin --client-certificate=/etc/ssl/k8s/kube-admin.pem --client-key=/etc/ssl/k8s/kube-admin-key.pem --embed-certs=true 
kubectl config --kubeconfig=kube-admin.kubeconfig set-context kube-admin --cluster=kubernetes --user=kube-admin 
kubectl config --kubeconfig=kube-admin.kubeconfig use-context kube-admin

```


### Kubernetes使用证书和私钥

- kube-apiserver.service
```shell
$ cat > /usr/lib/systemd/system/kube-apiserver.service << EOF
[Unit]
Description=Kubernetes apiserver Server

[Service]
User=root
ExecStart=/opt/kube/bin/kube-apiserver --admission-control=NamespaceLifecycle,LimitRanger,NodeRestriction,ServiceAccount,PersistentVolumeLabel,DefaultStorageClass,ResourceQuota,DefaultTolerationSeconds  --authorization-mode=Node,RBAC --bind-address=192.168.202.126 --insecure-bind-address=0.0.0.0 --service-cluster-ip-range=172.16.0.0/16 --service-node-port-range=10000-30000 --tls-cert-file=/etc/ssl/k8s/k8s.pem --tls-private-key-file=/etc/ssl/k8s/k8s-key.pem --client-ca-file=/etc/ssl/k8s/ca.pem --service-account-key-file=/etc/ssl/k8s/ca-key.pem --storage-backend=etcd3 --etcd-servers=http://localhost:2379 --enable-swagger-ui=true --allow-privileged=true --audit-log-maxage=30 --audit-log-maxbackup=3 --audit-log-maxsize=100 --audit-log-path=/var/lib/audit.log --event-ttl=1h --logtostderr=false --log-dir=/opt/kube/log/ --v=2 

Restart=on-failure
KillMode=process

[Install]
WantedBy=multi-user.target
EOF


# --tls-cert-file=/etc/ssl/k8s/k8s.pem,服务端的证书(公钥)
# --tls-private-key-file=/etc/ssl/k8s/k8s-key.pem,服务端的私钥
# --client-ca-file=/etc/ssl/k8s/ca.pem,用于认证客户端证书
# --service-account-key-file=/etc/ssl/k8s/ca-key.pem,用户验证ServiceAccount的tokens,如果没有设置会使用--tls-private-key-file

```

- kube-controller-manager.service
```shell
$ cat > /usr/lib/systemd/system/kube-controller-manager.service << EOF
[Unit]
Description=Kubernetes Controller-Manager

[Service]
User=root
ExecStart=/opt/kube/bin/kube-controller-manager --kubeconfig=/etc/kubernetes/kube-controller-manager.kubeconfig --use-service-account-credentials  --service-account-private-key-file=/etc/ssl/k8s/ca-key.pem --root-ca-file=/etc/ssl/k8s/ca.pem  --logtostderr=false --log-dir=/opt/kube/log/ --v=2
  
Restart=on-failure
KillMode=process

[Install]
WantedBy=multi-user.target
EOF

```

- kube-scheduler.service
```shell
cat > /usr/lib/systemd/system/kube-scheduler.service << EOF

[Unit]
Description=Kubernetes Scheduler
 
[Service]
User=root
ExecStart=/opt/kube/bin/kube-scheduler --kubeconfig=/etc/kubernetes/kube-scheduler.kubeconfig  --logtostderr=false --log-dir=/opt/kube/log/ --v=2
 
Restart=on-failure
RestartSec=5
 
[Install]
WantedBy=multi-user.target
EOF

```

- kubelet.service 
```shell
cat > /usr/lib/systemd/system/kubelet.service << EOF
[Unit]
Description=Kubernetes Kubelet Server
After=docker.service
Requires=docker.service

[Service]
User=root
ExecStart=/opt/kube/bin/kubelet --kubeconfig=/etc/kubernetes/kubelet202127.kubeconfig --allow-privileged --network-plugin=cni --pod-infra-container-image=kubeguide/pause-amd64:3.0 --hostname-override=192.168.202.127 --logtostderr=false --log-dir=/opt/kube/log/ --v=2 --node-labels=node-role.kubernetes.io/node=node --cluster-dns=172.16.0.2  --cluster_domain=cluster.local


Restart=on-failure
KillMode=process

[Install]
WantedBy=multi-user.target
EOF

```

- kube-proxy.service 
```shell
cat > /usr/lib/systemd/system/kube-proxy.service << EOF
[Unit]
Description=Kubernetes kube-proxy
After=network.service
Requires=network.service

[Service]
User=root
ExecStart=/opt/kube/bin/kube-proxy --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig --hostname-override=192.168.202.127 --logtostderr=false --log-dir=/opt/kube/log/ --v=2
 
Restart=on-failure
KillMode=process

[Install]
WantedBy=multi-user.target

EOF

```
















